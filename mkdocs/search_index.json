{
    "docs": [
        {
            "location": "/", 
            "text": "ThemeTweaker\n\n\nTweak your color theme (scheme) in Sublime Text.\n\n\n\n\nOverview\n\n\nChange your Sublime tmTheme files by applying different color filters on the fly.\n\n\nThemeTweaker came out as a side project while I was working on ExportHtml.  I was dealing with the working with replicating the tmTheme in an HTML output, but later wanted to be able to modify the tmTheme with filters such as: rotating the hue, adjusting the contrast, increasing/deceasing the brightness, etc.  Some of the filters are useless, but they were fun to throw together.  I have been using it for a while, but recently decided to throw it together in its own package.  It can be used as a stand alone plugin for tweaking your themes, or it can be leveraged by other plugins for modifying color scheme (tmTheme) files.\n\n\nFeatures\n\n\nThemeTweaker has a number of commands that allow you to do the following:\n\n\n\n\nIncrease/Decrease brightness.\n\n\nIncrease/Decrease saturation.\n\n\nRotate the hues of the theme.\n\n\nColorize the theme (make all of the colors different shades of one color).\n\n\nConvert the theme to grayscale.\n\n\nApply a Sepia filter.\n\n\nInvert the color scheme.\n\n\nCause foreground scopes to glow (keywords etc. except for the main foreground color; maybe that will change).\n\n\nWith filters that make sense, allow limiting the filter to background or foreground scopes.\n\n\nCreate shortcuts to adjust the color scheme only when in \nThemeMode\n.\n\n\nAllow \nundo\n and \nredo\n of filters while in \nThemeMode\n.\n\n\nA command to revert all filters in one shot and return to original theme.\n\n\nDoes not modify the original theme directly, but creates a copy.\n\n\nLive update when applying filters.", 
            "title": "Home"
        }, 
        {
            "location": "/#themetweaker", 
            "text": "Tweak your color theme (scheme) in Sublime Text.", 
            "title": "ThemeTweaker"
        }, 
        {
            "location": "/#overview", 
            "text": "Change your Sublime tmTheme files by applying different color filters on the fly.  ThemeTweaker came out as a side project while I was working on ExportHtml.  I was dealing with the working with replicating the tmTheme in an HTML output, but later wanted to be able to modify the tmTheme with filters such as: rotating the hue, adjusting the contrast, increasing/deceasing the brightness, etc.  Some of the filters are useless, but they were fun to throw together.  I have been using it for a while, but recently decided to throw it together in its own package.  It can be used as a stand alone plugin for tweaking your themes, or it can be leveraged by other plugins for modifying color scheme (tmTheme) files.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "ThemeTweaker has a number of commands that allow you to do the following:   Increase/Decrease brightness.  Increase/Decrease saturation.  Rotate the hues of the theme.  Colorize the theme (make all of the colors different shades of one color).  Convert the theme to grayscale.  Apply a Sepia filter.  Invert the color scheme.  Cause foreground scopes to glow (keywords etc. except for the main foreground color; maybe that will change).  With filters that make sense, allow limiting the filter to background or foreground scopes.  Create shortcuts to adjust the color scheme only when in  ThemeMode .  Allow  undo  and  redo  of filters while in  ThemeMode .  A command to revert all filters in one shot and return to original theme.  Does not modify the original theme directly, but creates a copy.  Live update when applying filters.", 
            "title": "Features"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of ThemeTweaker.\n\n\n\n\nOverview\n\n\nIn order to use ThemeTweaker, you can set up command palette commands, keymaps, menu items etc.  ThemeTweaker comes with an example keymap file to show how commands are constructed.\n\n\nThe default steps, or hues, or intensities (depending on the command), are defined in the settings file.  These can be changed if desired.\n\n\nBasic commands\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBrightness\n\n\nThemeTweakerBrightnessCommand\n can take a step value of float type to determine the magnitude of brightness to apply.  It is in relation to the center \n1.0\n.  So a value of \n0.01\n would shift it \n1.01\n. It also takes a direction argument which is denoted with a \n+\n or \n-\n direction. You can limit the filter to the background or foreground using the \ncontext\n argument and giving it a value of \nbg\n or \nfg\n respectively.\n\n\n\n\n\n\nSaturation\n\n\nThemeTweakerSaturationCommand\n can take a step value of float type to determine the magnitude of saturation to apply.  It is in relation to the center \n1.0\n.  So a value of \n0.01\n would shift it \n1.01\n. It also takes a direction argument which is denoted with a \n+\n or \n-\n direction.  You can limit the filter to the background or foreground using the \ncontext\n argument and giving it a value of \nbg\n or \nfg\n respectively.\n\n\n\n\n\n\nHue\n\n\nThemeTweakerHueCommand\n can take an integer which represents a degree between \n0\n and \n360\n to shift the hue.  It also takes a direction argument which is denoted with a \n+\n or \n-\n direction.  You can limit the filter to the background or foreground using the \ncontext\n argument and giving it a value of \nbg\n or \nfg\n respectively.\n\n\n\n\n\n\nColorize\n\n\nThemeTweakerColorizeCommand\n can take a hue integer that all colors will be converted to.  All colors will be a shade of that hue depending on what their luminance was before conversion. Hues are between \n0\n and \n360\n.  You can limit the filter to the background or foreground using the \ncontext\n argument and giving it a value of \nbg\n or \nfg\n respectively.\n\n\n\n\n\n\nInvert\n\n\nThemeTweakerInvertCommand\n will invert all of the colors.  You can limit the filter to the background or foreground using the \ncontext\n argument and giving it a value of \nbg\n or \nfg\n respectively.\n\n\n\n\n\n\nSepia\n\n\nThemeTweakerSepiaCommand\n will apply a sepia filter to all colors.  You can limit the filter to the background or foreground using the \ncontext\n argument and giving it a value of \nbg\n or \nfg\n respectively.\n\n\n\n\n\n\nGrayscale\n\n\nThemeTweakerGrayscaleCommand\n will apply a grayscale filter to all colors.  You can limit the filter to the background or foreground using the \ncontext\n argument and giving it a value of \nbg\n or \nfg\n respectively.\n\n\n\n\n\n\nGlow\n\n\nThemeTweakerGlowCommand\n can take a floating point glow intensity to determine the strength of the glow.  Glow should be between \n0.0\n and \n1.0\n.\n\n\n\n\n\n\n\n\nCommands are constructed like so:\n\n\n{\n\n    \nkeys\n:\n \n[\nup\n],\n\n    \ncommand\n:\n \ntheme_tweaker_brightness\n,\n\n    \nargs\n:\n \n{\n\n        \ndirection\n:\n \n+\n\n    \n}\n\n\n},\n\n\n\n\n\n\nTo limit a command or shortcut to only when \nThemeMode\n is enabled:\n\n\n{\n\n    \nkeys\n:\n \n[\nup\n],\n\n    \ncommand\n:\n \ntheme_tweaker_brightness\n,\n\n    \ncontext\n:\n \n[\n\n        \n{\nkey\n:\n \ntheme_tweaker\n}\n\n    \n],\n\n    \nargs\n:\n \n{\n\n        \ndirection\n:\n \n+\n\n    \n}\n\n\n},\n\n\n\n\n\n\nTo override the default step, hue, or intensity (override argument name will vary depending on function):\n\n\n{\n\n    \nkeys\n:\n \n[\nup\n],\n\n    \ncommand\n:\n \ntheme_tweaker_brightness\n,\n\n    \ncontext\n:\n \n[\n\n        \n{\nkey\n:\n \ntheme_tweaker\n}\n\n    \n],\n\n    \nargs\n:\n \n{\n\n        \ndirection\n:\n \n+\n,\n\n        \nstep\n:\n \n0.05\n\n    \n}\n\n\n},\n\n\n\n\n\n\nApply filter to just the foreground (for all commands except \nglow\n):\n\n\n{\n\n    \nkeys\n:\n \n[\nup\n],\n\n    \ncommand\n:\n \ntheme_tweaker_brightness\n,\n\n    \ncontext\n:\n \n[\n\n        \n{\nkey\n:\n \ntheme_tweaker\n}\n\n    \n],\n\n    \nargs\n:\n \n{\n\n        \ndirection\n:\n \n+\n,\n\n        \nstep\n:\n \n0.05\n,\n\n        \ncontext\n:\n \nfg\n\n    \n}\n\n\n},\n\n\n\n\n\n\nTweakMode\n can be enabled/disabled via the command palette command \nTheme Tweaker: Toggle Tweak Mode\n\n\nSpecial Commands\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUndo\n\n\nThemeTweakerUndoCommand\n reverts the last applied filter.\n\n\n\n\n\n\nRedo\n\n\nThemeTweakerRedoCommand\n re-applies the last applied filter that was reverted.\n\n\n\n\n\n\nClear\n\n\nThemeTweakerClearCommand\n clears all applied filters.\n\n\n\n\n\n\n\n\nCustom Filter Command\n\n\nThemeTweakerCustomCommand\n is a command that allows you to manually chain different filters together.  It takes a string with special syntax to apply filters.  It will not calculate values in relation to center, or take separate direction arguments etc.  All operations are defined by a single string.\n\n\nexample:\n\n\n{\n\n    \nkeys\n:\n \n[\nup\n],\n\n    \ncommand\n:\n \ntheme_tweaker_custom\n,\n\n    \ncontext\n:\n \n[\n\n        \n{\nkey\n:\n \ntheme_tweaker\n}\n\n    \n],\n\n    \nargs\n:\n \n{\n\n        \nfilters\n:\n \ngrayscale@fg;sepia;colorize(0);hue(-30);brightness(1.050000)@bg;saturation(0.900000);brightness(0.950000)\n\n    \n}\n\n\n},\n\n\n\n\n\n\nThe available filters are:\n\n- grayscale\n\n- sepia\n\n- invert\n\n- brightness(float)\n\n- saturation(float)\n\n- hue(signed integer)\n\n- colorize(integer)\n\n- glow(positive float)\n\n\nTo apply a filter to just the foreground or background, simply add \n@fg\n or \n@bg\n to the filter in question.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of ThemeTweaker.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#overview", 
            "text": "In order to use ThemeTweaker, you can set up command palette commands, keymaps, menu items etc.  ThemeTweaker comes with an example keymap file to show how commands are constructed.  The default steps, or hues, or intensities (depending on the command), are defined in the settings file.  These can be changed if desired.", 
            "title": "Overview"
        }, 
        {
            "location": "/usage/#basic-commands", 
            "text": "Action  Description      Brightness  ThemeTweakerBrightnessCommand  can take a step value of float type to determine the magnitude of brightness to apply.  It is in relation to the center  1.0 .  So a value of  0.01  would shift it  1.01 . It also takes a direction argument which is denoted with a  +  or  -  direction. You can limit the filter to the background or foreground using the  context  argument and giving it a value of  bg  or  fg  respectively.    Saturation  ThemeTweakerSaturationCommand  can take a step value of float type to determine the magnitude of saturation to apply.  It is in relation to the center  1.0 .  So a value of  0.01  would shift it  1.01 . It also takes a direction argument which is denoted with a  +  or  -  direction.  You can limit the filter to the background or foreground using the  context  argument and giving it a value of  bg  or  fg  respectively.    Hue  ThemeTweakerHueCommand  can take an integer which represents a degree between  0  and  360  to shift the hue.  It also takes a direction argument which is denoted with a  +  or  -  direction.  You can limit the filter to the background or foreground using the  context  argument and giving it a value of  bg  or  fg  respectively.    Colorize  ThemeTweakerColorizeCommand  can take a hue integer that all colors will be converted to.  All colors will be a shade of that hue depending on what their luminance was before conversion. Hues are between  0  and  360 .  You can limit the filter to the background or foreground using the  context  argument and giving it a value of  bg  or  fg  respectively.    Invert  ThemeTweakerInvertCommand  will invert all of the colors.  You can limit the filter to the background or foreground using the  context  argument and giving it a value of  bg  or  fg  respectively.    Sepia  ThemeTweakerSepiaCommand  will apply a sepia filter to all colors.  You can limit the filter to the background or foreground using the  context  argument and giving it a value of  bg  or  fg  respectively.    Grayscale  ThemeTweakerGrayscaleCommand  will apply a grayscale filter to all colors.  You can limit the filter to the background or foreground using the  context  argument and giving it a value of  bg  or  fg  respectively.    Glow  ThemeTweakerGlowCommand  can take a floating point glow intensity to determine the strength of the glow.  Glow should be between  0.0  and  1.0 .     Commands are constructed like so:  { \n     keys :   [ up ], \n     command :   theme_tweaker_brightness , \n     args :   { \n         direction :   + \n     }  },    To limit a command or shortcut to only when  ThemeMode  is enabled:  { \n     keys :   [ up ], \n     command :   theme_tweaker_brightness , \n     context :   [ \n         { key :   theme_tweaker } \n     ], \n     args :   { \n         direction :   + \n     }  },    To override the default step, hue, or intensity (override argument name will vary depending on function):  { \n     keys :   [ up ], \n     command :   theme_tweaker_brightness , \n     context :   [ \n         { key :   theme_tweaker } \n     ], \n     args :   { \n         direction :   + , \n         step :   0.05 \n     }  },    Apply filter to just the foreground (for all commands except  glow ):  { \n     keys :   [ up ], \n     command :   theme_tweaker_brightness , \n     context :   [ \n         { key :   theme_tweaker } \n     ], \n     args :   { \n         direction :   + , \n         step :   0.05 , \n         context :   fg \n     }  },    TweakMode  can be enabled/disabled via the command palette command  Theme Tweaker: Toggle Tweak Mode", 
            "title": "Basic commands"
        }, 
        {
            "location": "/usage/#special-commands", 
            "text": "Action  Description      Undo  ThemeTweakerUndoCommand  reverts the last applied filter.    Redo  ThemeTweakerRedoCommand  re-applies the last applied filter that was reverted.    Clear  ThemeTweakerClearCommand  clears all applied filters.", 
            "title": "Special Commands"
        }, 
        {
            "location": "/usage/#custom-filter-command", 
            "text": "ThemeTweakerCustomCommand  is a command that allows you to manually chain different filters together.  It takes a string with special syntax to apply filters.  It will not calculate values in relation to center, or take separate direction arguments etc.  All operations are defined by a single string.  example:  { \n     keys :   [ up ], \n     command :   theme_tweaker_custom , \n     context :   [ \n         { key :   theme_tweaker } \n     ], \n     args :   { \n         filters :   grayscale@fg;sepia;colorize(0);hue(-30);brightness(1.050000)@bg;saturation(0.900000);brightness(0.950000) \n     }  },    The available filters are: \n- grayscale \n- sepia \n- invert \n- brightness(float) \n- saturation(float) \n- hue(signed integer) \n- colorize(integer) \n- glow(positive float)  To apply a filter to just the foreground or background, simply add  @fg  or  @bg  to the filter in question.", 
            "title": "Custom Filter Command"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nThe MIT License (MIT)\n\n\nCopyright \n 2013 - 2015 Isaac Muse\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\n\nthis software and associated documentation files (the \nSoftware\n), to deal in\n\nthe Software without restriction, including without limitation the rights to\n\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n\nthe Software, and to permit persons to whom the Software is furnished to do so,\n\nsubject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\n\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "The MIT License (MIT)  Copyright   2013 - 2015 Isaac Muse  Permission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the  Software ), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of \nthe Software, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:  The above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS \nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}